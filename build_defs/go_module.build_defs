CONFIG.setdefault("MODDOWN_TOOL", "//:moddown")

def go_module_download(name:str, module:str, version:str, tag:str=None, sum:str=None, replace:str=None, deps:list=[],
                       patch:str=None, strip:list=None, licences:list=None, visibility:list=None, test_only:bool&testonly=False):
    """Downloads the source of a Go module.

    go_module_download uses `go mod download` under the hood to download the module source to the cache.
    It does not compile anything, just downloads the source.

    It's useful in situations when there are circular dependencies between modules
    and they can't be compiled into a single dependency.

    Args:
      name (str): Name of the rule
      module (str): Target module to download (eg. "github.com/gorilla/mux").
      version (str): Module version.
      sum (str): Module dir sum.
      replace (str): Module replacement to download instead (eg. "github.com/mygorilla/mux").
      deps (list): Dependencies
      patch (str): Patch file to apply.
      strip (list): List of paths to strip from the target.
      licences (list): Licences this rule is subject to.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule will only be visible to test targets.
    """

    labels = [f"go_get:{module}@{version}"]
    dest = "src/" + module

    tools = {
        "go": [CONFIG.GO_TOOL],
        "moddown": [CONFIG.MODDOWN_TOOL],
    }

    download_module = replace or module

    cmd = [
        "export GO111MODULE=on", # Needed by module mode.
        "export TMPDIR=$TMPDIR/tmp && mkdir -p $TMPDIR", # Go modules doesn't tolerate being inside $TMPDIR
        "go mod init download", # Do not interfere with any parent module
        f"mkdir -p {dest}", # TODO: Should be done my moddown?
    ]

    if sum: # The sum is provided so we don't have to look it up from sum DB
        cmd += ["export GOSUMDB=off"]

    download_cmd = f'"$TOOLS_GO" mod download -x -modcacherw -json {download_module}@{version} | "$TOOLS_MODDOWN" -f - -dest {dest}'

    if sum: # The sum is provided so compare it
        download_cmd += f" -sum {sum}"

    cmd += [download_cmd]

    if patch:
        cmd += [f'patch -s -d {dest} -p1 < "$TMP_DIR"/$SRCS_PATCH']

    if strip:
        cmd += [f"rm -rf {dest}/{s}" for s in strip]

    return build_rule(
        name = name,
        tag = tag,
        srcs = {
            "patch": [patch],
        },
        deps = deps,
        outs = [dest],
        tools = tools,
        building_description = "Fetching...",
        cmd = " && ".join(cmd),
        requires = ["go"],
        test_only = test_only,
        visibility = visibility,
        labels = labels,
        sandbox = False,
        licences = licences,
    )

def fileexport(name:str, srcs:list, tag:str='', deps:list=None, exported_deps:list=None,
              visibility:list=None, labels:list&features&tags=None, binary:bool=False, output_is_complete:bool=True,
              requires:list=None, provides:dict=None, hashes:list=None, test_only:bool&testonly=False):
    """Defines a collection of files which other rules can depend on.
    Sources can come from dependencies.
    The exported files will appear as if they were coming from the current package.

    Args:
      name (str): Name of the rule.
      srcs (list): Source files for the rule.
      tag (str): Tag applied to name; generates a private rule, for example name='a',tag='b' gives
                 _a#b. Typically used for "private" rules.
      deps (list): Dependencies of the rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
      visibility (list): Visibility declaration of the rule.
      labels (list): Labels to apply to this rule
      binary (bool): True to mark the rule outputs as binary
      output_is_complete (bool): If this is true then the rule blocks downwards searches of transitive
                                 dependencies by other rules.
      requires (list): Kinds of output from other rules that this one requires.
      provides (dict): Kinds of output that this provides for other rules (see genrule() for a more
                       in-depth discussion of this).
      hashes (list): List of acceptable output hashes for this rule.
      test_only (bool): If true the rule will only be visible to test targets.
    """

    files = ' '.join(srcs)

    return build_rule(
        name = name,
        tag = tag,
        cmd = '\n'.join([
            f'files="{files}"',
            'for f in $files; do ',
            '    cp -r $SRCS/$f _out/ ',
            'done ']),
        srcs = deps,
        output_dirs = ["_out/"],
        exported_deps = exported_deps,
        visibility = visibility,
        building_description = 'Copying...',
        output_is_complete = output_is_complete,
        requires = requires,
        provides = provides,
        test_only = test_only,
        labels = labels,
        binary = binary,
        hashes = hashes,
    )

def fileexport2(name:str, srcs:list, tag:str='', deps:list=None, exported_deps:list=None,
              visibility:list=None, labels:list&features&tags=None, binary:bool=False, output_is_complete:bool=True,
              requires:list=None, provides:dict=None, hashes:list=None, test_only:bool&testonly=False):
    """Defines a collection of files which other rules can depend on.
    Sources can come from dependencies.
    The exported files will appear as if they were coming from the current package.

    Args:
      name (str): Name of the rule.
      srcs (list): Source files for the rule.
      tag (str): Tag applied to name; generates a private rule, for example name='a',tag='b' gives
                 _a#b. Typically used for "private" rules.
      deps (list): Dependencies of the rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
      visibility (list): Visibility declaration of the rule.
      labels (list): Labels to apply to this rule
      binary (bool): True to mark the rule outputs as binary
      output_is_complete (bool): If this is true then the rule blocks downwards searches of transitive
                                 dependencies by other rules.
      requires (list): Kinds of output from other rules that this one requires.
      provides (dict): Kinds of output that this provides for other rules (see genrule() for a more
                       in-depth discussion of this).
      hashes (list): List of acceptable output hashes for this rule.
      test_only (bool): If true the rule will only be visible to test targets.
    """

    files = ' '.join(srcs)

    outs = []

    for f in srcs:
        outs += [f"{name}/{f}"]

    return build_rule(
        name = name,
        tag = tag,
        cmd = '\n'.join([
            f'files="{files}"',
            'for f in $files; do ',
            f'    cp -r "$SRCS/$f" {name}/$f ',
            'done ']),
        srcs = deps,
        outs = outs,
        exported_deps = exported_deps,
        visibility = visibility,
        building_description = 'Copying...',
        output_is_complete = output_is_complete,
        requires = requires,
        provides = provides,
        test_only = test_only,
        labels = labels,
        binary = binary,
        hashes = hashes,
    )
